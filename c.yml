version: '2'
output: 'prefixed'

vars:
  DATE: 
    sh: date '+%Y-%m-%dT%H:%M:%S%z'
  VERSION: 
    sh: git describe 2>/dev/null|| git log --pretty=format:"%h"|head -n 1

tasks:
  setup:
   desc: Set up environment
   cmds:
    - mkdir -p ci-build/
  bin:
   desc: Build binary
   deps: [setup]
   cmds:
    - gcc source/*.c 
          -Wall 
          -o ci-build/{{OS}}.{{.BINARY}} 
          -I include/ {{.LIBRARIES}} 
          -DBUILD_DATE="\"{{.DATE}}\"" -DBUILD_VERSION="\"{{.VERSION}}\""
  debug:
   desc: Build binary for debugging
   deps: [setup]
   cmds:
    - gcc source/*.c 
          -Wall -g 
          -o ci-build/{{OS}}.{{.BINARY}}.dbg 
          -I include/ {{.LIBRARIES}} 
          -DBUILD_DATE="\"{{.DATE}}\"" -DBUILD_VERSION="\"{{.VERSION}}\""
  test:
   desc: Build and execute test binary
   deps: [setup]
   cmds:
     - gcc {{.TEST_SOURCE_FILES}} test/*.c 
       -Wall -g -o ci-build/{{OS}}.{{.BINARY}}.test
       -I include -I test {{.LIBRARIES}} 
       -DBUILD_DATE="\"{{.DATE}}\"" -DBUILD_VERSION="\"{{.VERSION}}\""
     - ci-build/{{OS}}.{{.BINARY}}.test
   var:
    TEST_SOURCE_FILES:
    # The test suit has its own main function. Therefore the original has
    # to be excluded from compilation.
    # Get all source files expect the one with the binary which should be 
    # placed in a source file named after the binary
    sh: find source -name *.c ! -name {{.BINARY}}.c|tr "\n" " "
    
  clean:
   desc: Clean up files of the build process
   cmds:
    - rm -rf ci-build/
  lint:
    desc: Run gcc's syntax-checker 
    deps: [setup]
    cmds:
     - gcc source/*.c
           -fsyntax-only
           -I include/
  ci:
   desc: Lint and test
   cmds:
    - task: lint
    - task: test
